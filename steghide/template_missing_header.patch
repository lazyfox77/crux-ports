Only in steghide-0.5.1.new/po: de.gmo
Only in steghide-0.5.1.new/po: es.gmo
Only in steghide-0.5.1.new/po: fr.gmo
Only in steghide-0.5.1.new/po: ro.gmo
diff -crB steghide-0.5.1.orig/src/AuData.h steghide-0.5.1.new/src/AuData.h
*** steghide-0.5.1.orig/src/AuData.h	2003-09-28 17:30:29.000000000 +0200
--- steghide-0.5.1.new/src/AuData.h	2018-05-31 10:43:15.263025404 +0200
***************
*** 26,47 ****
--- 26,55 ----
  
  // AuMuLawAudioData
  typedef AudioDataImpl<AuMuLaw,BYTE> AuMuLawAudioData ;
+ template<>
  inline BYTE AuMuLawAudioData::readValue (BinaryIO* io) const { return (io->read8()) ; }
+ template<>
  inline void AuMuLawAudioData::writeValue (BinaryIO* io, BYTE v) const { io->write8(v) ; }
  
  // AuPCM8AudioData
  typedef AudioDataImpl<AuPCM8,SBYTE> AuPCM8AudioData ;
+ template<>
  inline SBYTE AuPCM8AudioData::readValue (BinaryIO* io) const { return ((SBYTE) io->read8()) ; }
+ template<>
  inline void AuPCM8AudioData::writeValue (BinaryIO* io, SBYTE v) const { io->write8((BYTE) v) ; }
  
  // AuPCM16AudioData
  typedef AudioDataImpl<AuPCM16,SWORD16> AuPCM16AudioData ;
+ template<>
  inline SWORD16 AuPCM16AudioData::readValue (BinaryIO* io) const { return ((SWORD16) io->read16_be()) ; }
+ template<>
  inline void AuPCM16AudioData::writeValue (BinaryIO* io, SWORD16 v) const { io->write16_be((UWORD16) v) ; }
  
  // AuPCM32AudioData
  typedef AudioDataImpl<AuPCM32,SWORD32> AuPCM32AudioData ;
+ template<>
  inline SWORD32 AuPCM32AudioData::readValue (BinaryIO* io) const { return ((SWORD32) io->read32_be()) ; }
+ template<>
  inline void AuPCM32AudioData::writeValue (BinaryIO* io, SWORD32 v) const { io->write32_be((UWORD32) v) ; }
  
  #endif // ndef SH_AUDATA_H
diff -crB steghide-0.5.1.orig/src/AuSampleValues.cc steghide-0.5.1.new/src/AuSampleValues.cc
*** steghide-0.5.1.orig/src/AuSampleValues.cc	2003-09-28 17:30:30.000000000 +0200
--- steghide-0.5.1.new/src/AuSampleValues.cc	2018-05-31 10:44:04.068124995 +0200
***************
*** 21,37 ****
--- 21,45 ----
  #include "AuSampleValues.h"
  
  // AuMuLawSampleValue
+ template<>
  const BYTE AuMuLawSampleValue::MinValue = 0 ;
+ template<>
  const BYTE AuMuLawSampleValue::MaxValue = BYTE_MAX ;
  
  // AuPCM8SampleValue
+ template<>
  const SBYTE AuPCM8SampleValue::MinValue = SBYTE_MIN ;
+ template<>
  const SBYTE AuPCM8SampleValue::MaxValue = SBYTE_MAX ;
  
  // AuPCM16SampleValue
+ template<>
  const SWORD16 AuPCM16SampleValue::MinValue = SWORD16_MIN ;
+ template<>
  const SWORD16 AuPCM16SampleValue::MaxValue = SWORD16_MAX ;
  
  // AuPCM32SampleValue
+ template <>
  const SWORD32 AuPCM32SampleValue::MinValue = SWORD32_MIN ;
+ template <>
  const SWORD32 AuPCM32SampleValue::MaxValue = SWORD32_MAX ;
diff -crB steghide-0.5.1.orig/src/Graph.cc steghide-0.5.1.new/src/Graph.cc
*** steghide-0.5.1.orig/src/Graph.cc	2003-10-11 23:54:26.000000000 +0200
--- steghide-0.5.1.new/src/Graph.cc	2018-05-31 10:44:28.416174473 +0200
***************
*** 22,27 ****
--- 22,28 ----
  #include <list>
  #include <map>
  #include <vector>
+ #include <climits>
  
  #include "BitString.h"
  #include "CvrStgFile.h"
diff -crB steghide-0.5.1.orig/src/MHashPP.cc steghide-0.5.1.new/src/MHashPP.cc
*** steghide-0.5.1.orig/src/MHashPP.cc	2003-10-05 12:17:50.000000000 +0200
--- steghide-0.5.1.new/src/MHashPP.cc	2018-05-31 10:46:59.876479395 +0200
***************
*** 120,126 ****
  
  std::string MHashPP::getAlgorithmName (hashid id)
  {
! 	char *name = mhash_get_hash_name (id) ;
  	std::string retval ;
  	if (name == NULL) {
  		retval = std::string ("<algorithm not found>") ;
--- 120,126 ----
  
  std::string MHashPP::getAlgorithmName (hashid id)
  {
! 	char *name = (char *) mhash_get_hash_name (id) ;
  	std::string retval ;
  	if (name == NULL) {
  		retval = std::string ("<algorithm not found>") ;
